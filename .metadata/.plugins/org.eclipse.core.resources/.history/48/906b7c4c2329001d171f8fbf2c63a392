/**
 * 
 */
package com.atguigu.crowd.mvc.config;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

import com.atguigu.crowd.util.CrowdUtil;
import com.atguigu.crowd.util.ResultEntity;
import com.google.gson.Gson;

/**
 * @ClassName: CrowdExceptionResolver
 * @Description: 描述这个类的作用
 * @author: zhuyuqi
 * @Company: http://sk370.github.io
 * @date: 2022年8月31日 下午7:19:38
 * @param:
 */
@ControllerAdvice // 声明该类为基于注解的异常处理类
public class CrowdExceptionResolver {
    @ExceptionHandler(value = NullPointerException.class) // 关联异常类型和方法
    public ModelAndView resolveNullPointer(NullPointerException exception, HttpServletRequest request,
        HttpServletResponse response) throws IOException {
        boolean requestType = CrowdUtil.judgeRequestType(request);
        // ajax请求的异常
        if (requestType) {
            ResultEntity.failed(exception.getMessage());// 创建异常实体
            Gson gson = new Gson();
            String json = gson.toJson(gson);// 将异常实体转换为json字符串
            response.getWriter().write(json);// 使用httpresponse将json字符串传给前端
            return null;// 上面httpresponse已经处理了，不需要ModelAndView处理了
        }
        // 非ajax请求的异常
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.addObject("excepiton", exception);// 添加异常对象
        modelAndView.setViewName("system-error");// 指定返回的异常界面
        return modelAndView;
    }
    
    @ExceptionHandler(value = ArithmeticException.class) // 关联异常类型和方法
    public ModelAndView resolveArithmeticException(ArithmeticException exception, HttpServletRequest request,
        HttpServletResponse response) throws IOException {
        boolean requestType = CrowdUtil.judgeRequestType(request);
        // ajax请求的异常
        if (requestType) {
            ResultEntity.failed(exception.getMessage());// 创建异常实体
            Gson gson = new Gson();
            String json = gson.toJson(gson);// 将异常实体转换为json字符串
            response.getWriter().write(json);// 使用httpresponse将json字符串传给前端
            return null;// 上面httpresponse已经处理了，不需要ModelAndView处理了
        }
        // 非ajax请求的异常
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.addObject("excepiton", exception);// 添加异常对象
        modelAndView.setViewName("system-error");// 指定返回的异常界面
        return modelAndView;
    }
}
